
companion object {
  /** This character denotes the end of file */
  var YYEOF = -1;

  /** initial size of the lookahead buffer */
--- private static final int ZZ_BUFFERSIZE = ...; L1

  /** lexical states */
---  lexical states, charmap L2

  /* error codes */
  private var ZZ_UNKNOWN_ERROR = 0;
  private var ZZ_NO_MATCH = 1;
  private var ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  var ZZ_ERROR_MSG = arrayOf(
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  );

--- isFinal list L3
    var message = try {
      ZZ_ERROR_MSG[errorCode];
    } catch (e: ArrayIndexOutOfBoundsException) {
      ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

--- throws clause L7
}
  /** the input device */
  private lateinit var zzReader: kotlinx.io.Source;

  /** the current state of the DFA */
  private var zzState = 0;

  /** the current lexical state */
  private var zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private var zzBuffer: CharArray = CharArray(kotlin.math.min(ZZ_BUFFERSIZE, zzMaxBufferLen()));

  /** the textposition at the last accepting state */
  private var zzMarkedPos = 0;

  /** the current text position in the buffer */
  private var zzCurrentPos = 0;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private var zzStartRead = 0;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private var zzEndRead = 0;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private var zzAtEOF = false;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private var zzFinalHighSurrogate = 0;

  /** the stack of open (nested) input streams to read from */
  private var zzStreams = ArrayDeque<ZzFlexStreamInfo>();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private final class ZzFlexStreamInfo (
    var zzReader: kotlinx.io.Source,
    var zzEndRead: Int,
    var zzStartRead: Int,
    var zzCurrentPos: Int,
    var zzMarkedPos: Int,
    var yyline: Int,
    var yychar: Long,
    var yycolumn: Int,
    var zzBuffer: CharArray,
    var zzAtBOL: Boolean,
    var zzAtEOF: Boolean,
    var zzEOFDone: Boolean,
    var zzFinalHighSurrogate: Int,
  )

--- user class code L4

--- constructor declaration L5


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   kotlinx.io.IOException  if any I/O-Error occurs
   */
  @Throws(kotlinx.io.IOException::class)
  private fun zzRefill(): Boolean {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      zzBuffer.copyInto(zzBuffer, 0, zzStartRead, zzEndRead)

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.size - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      var newBuffer: CharArray = CharArray(kotlin.math.min(zzBuffer.size * 2, zzMaxBufferLen()));
      zzBuffer.copyInto(newBuffer, 0, 0, zzBuffer.size)
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    var requested: Int = zzBuffer.size - zzEndRead;
    var numRead = 0
    for (i in 0..<requested) {
      if (zzReader.exhausted()) {
        numRead = -1
        break
      }
      zzBuffer[zzEndRead + i] = zzReader.readCodePointValue().toChar()
      numRead++
    }

    /* not supposed to occur according to specification of kotlinx.io.Source */
    if (numRead == 0) {
      if (requested == 0) {
        throw kotlinx.io.EOFException("Scan buffer limit reached [" + zzBuffer.size + "]");
      } else {
        throw kotlinx.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround."
        );
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (zzBuffer[zzEndRead - 1]).isHighSurrogate() {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {          // There is room in the buffer for at least one more char
          var c: Int = zzReader.readInt();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = c.toChar();
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

  /**
   * Closes the input reader.
   *
   * @throws kotlinx.io.IOException if the reader could not be closed.
   */
  @Throws(kotlinx.io.IOException::class)
  fun yyclose() {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopStream (usually in an {@code <<EOF>>} action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  fun yypushStream(reader: kotlinx.io.Source) {
    zzStreams.addFirst(
        ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
            zzMarkedPos, yyline, yychar, yycolumn, zzBuffer, zzAtBOL, zzAtEOF, zzEOFDone,
            zzFinalHighSurrogate)
    );
    zzBuffer = CharArray(kotlin.math.min(ZZ_BUFFERSIZE, zzMaxBufferLen()));
    zzReader = reader;
    yyResetPosition();
  }


  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack.
   *
   * @throws java.util.NoSuchElementException
   *         if there is no further stream to read from.
   *
   * @throws kotlinx.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(kotlinx.io.Source)
   */
  @Throws(kotlinx.io.IOException::class)
  fun yypopStream() {
    zzReader.close();
    var s: ZzFlexStreamInfo  = zzStreams.removeFirst();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos;
    zzAtBOL       = s.zzAtBOL;
    zzAtEOF       = s.zzAtEOF;
    zzEOFDone     = s.zzEOFDone;
    zzFinalHighSurrogate = s.zzFinalHighSurrogate;
    yyline        = s.yyline;
    yychar        = s.yychar;
    yycolumn      = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left
   * to read from on the stream stack.
   */
 fun yymoreStreams(): Boolean {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to {@code ZZ_INITIAL}.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   *
   * @see #yypushStream(kotlinx.io.Source)
   * @see #yypopStream()
   */
  fun yyreset(reader: kotlinx.io.Source) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    var initBufferSize: Int = kotlin.math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.size > initBufferSize) {
      zzBuffer = CharArray(initBufferSize);
    }
  }

  /**
   * Resets the input position.
   */
  private fun yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }

  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  fun yyatEOF(): Boolean {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  fun yystate(): Int {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  fun yybegin(newState: Int) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  fun yytext(): String {
    return String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  fun yycharat(position: Int): Char {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  fun yylength(): Int {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Implementation of the `codePointAt` method of `java.lang.Character` for CharSequences
   *
   * @param index the index of the character for which to retrieve the code point.
   * @return the Unicode code point at the specified index.
   * @throws IndexOutOfBoundsException if the index is outside the bounds of the character sequence.
   */
  fun CharSequence.codePoint(index: Int): Int {
      if (index < 0 || index >= length) throw IndexOutOfBoundsException("Index: $index, Size: $length")
      val high = this[index]
      if (high.isHighSurrogate() && index + 1 < length) {
          val low = this[index + 1]
          if (low.isLowSurrogate()) {
              val codePoint: String = "$high$low"
              return codePoint.codePointAt(0)
          }
      }
      return high.code
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
--- zzScanError declaration L6


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
--- yypushback decl (contains zzScanError exception) L8
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


--- zzDoEOF L9
  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   kotlinx.io.IOException  if any I/O-Error occurs
   */
--- yylex declaration L10
    var zzInput: Int = 0;
    var zzAction: Int = 0;

--- local declarations L11

    while (true) {
      // cached fields:
      var zzCurrentPosL = 0
      var zzMarkedPosL: Int = zzMarkedPos;
      var zzEndReadL: Int = zzEndRead;
      var zzBufferL: CharArray = zzBuffer;

--- start admin (line, char, col count) L12
      zzAction = -1;

      zzCurrentPosL = zzMarkedPosL
      zzCurrentPos = zzMarkedPosL
      zzStartRead = zzMarkedPosL

--- start admin (lexstate etc) L13

      run zzForAction@{
        while (true) {

--- next input, line, col, char count, next transition, isFinal action L14
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
--- line count update L15
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
--- char count update L16

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
--- eofvalue L17
      }
      else {
--- actions L18
          else ->
--- no match L19
        }
      }
    }
    return null
  }

--- main L20

}
